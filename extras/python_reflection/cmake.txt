# Find python
find_package(Python3 COMPONENTS Interpreter REQUIRED)

# Reflect the project using the reflection_gen.py script
MACRO(REFLECT_HEADERS)
    FOREACH(header ${header_list})
        GET_FILENAME_COMPONENT(header_name ${header} NAME)
        file(READ ${header} file_contents)
        string(FIND "${file_contents}" "#include \"reflection_${header_name}\"" has_reflection)
        if(NOT ${has_reflection} EQUAL -1)
            message(STATUS "[INFO] Reflecting ${header_name}")
            add_custom_command(
                OUTPUT ${PROJECT_SOURCE_DIR}/generated/reflection/reflection_${header_name}
                COMMAND ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/fresa/reflection/reflection_gen.py ${header}
                WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
                DEPENDS ${header}
            )
            add_custom_target(
                ${header_name}
                DEPENDS ${PROJECT_SOURCE_DIR}/generated/reflection/reflection_${header_name}
            )
            add_dependencies(fresa ${header_name})
        endif()
    ENDFOREACH()
ENDMACRO()

if(${Python3_FOUND})
    REFLECT_HEADERS()
else()
    message(STATUS "[INFO] Python3 not found, reflection targets will not be generated")
endif()

# Merge reflection headers into header list
target_include_directories(fresa PUBLIC "${PROJECT_SOURCE_DIR}/generated/reflection")